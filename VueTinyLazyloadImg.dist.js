/*! VueTinyLazyloadImg v.0.0.2 */
!function(e,t){"object"==typeof exports&&"object"==typeof module?module.exports=t():"function"==typeof define&&define.amd?define("VueTinyLazyloadImg",[],t):"object"==typeof exports?exports.VueTinyLazyloadImg=t():e.VueTinyLazyloadImg=t()}("undefined"!=typeof self?self:this,function(){return function(e){function t(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}var n={};return t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{configurable:!1,enumerable:!0,get:r})},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},t.p="/",t(t.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(1),o={install:function(e){e.directive("lazyload",{bind:function(e){"IntersectionObserver"in window&&r.a.observe(e)}})}};t.default=o},function(e,t,n){"use strict";var r=null,o=function(e,t){e.classList.remove("v-lazy-loading"),e.classList.add(t),e.dataset.src="",e.dataset.err=""};"IntersectionObserver"in window&&(r=new IntersectionObserver(function(e,t){e.forEach(function(e){if(e.isIntersecting){var t=e.target;t.classList.add("v-lazy-loading");var n=t.dataset.src,i=t.dataset.err,a=new Image;a.src=n,a.onerror=function(){t.src=i,o(t,"v-lazy-error")},a.onload=function(){t.src=n,o(t,"v-lazy-loaded")},r.unobserve(t)}})})),t.a=r}])});
//# sourceMappingURL=VueTinyLazyloadImg.dist.js.map