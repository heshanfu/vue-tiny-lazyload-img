/*! VueTinyLazyloadImg v.0.0.1 */
!function(e,n){"object"==typeof exports&&"object"==typeof module?module.exports=n():"function"==typeof define&&define.amd?define("VueTinyLazyloadImg",[],n):"object"==typeof exports?exports.VueTinyLazyloadImg=n():e.VueTinyLazyloadImg=n()}("undefined"!=typeof self?self:this,function(){return function(e){function n(r){if(t[r])return t[r].exports;var o=t[r]={i:r,l:!1,exports:{}};return e[r].call(o.exports,o,o.exports,n),o.l=!0,o.exports}var t={};return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:r})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},n.p="/",n(n.s=0)}([function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0});var r=t(1),o={install:function(e){e.directive("lazyload",{bind:function(e){"IntersectionObserver"in window&&r.a.observe(e)}})}};n.default=o},function(e,n,t){"use strict";var r=null;"IntersectionObserver"in window&&(r=new IntersectionObserver(function(e,n){e.forEach(function(e){if(e.isIntersecting){var n=e.target,t=n.dataset.src,o=n.dataset.err,i=new Image;i.src=t,i.onerror=function(){n.src=o},i.onload=function(){n.src=t},r.unobserve(n)}})})),n.a=r}])});
//# sourceMappingURL=VueTinyLazyloadImg.dist.js.map